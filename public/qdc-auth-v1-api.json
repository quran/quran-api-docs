{
    "openapi": "3.0.0",
    "info": {
        "title": "Quran.com Auth V1 API",
        "version": "1.0.0",
        "description": "Quran.com Auth V1 APIs allow your app to authenticate and interact with Quran Foundation's users' resources. \n\n See it in action https://share.descript.com/view/rBczFqlYZQz"
    },
    "servers": [
        {
            "url": "https://auth.quran.com",
            "description": "Production server"
        },
        {
            "url": "http://localhost:3001",
            "description": "Development Server"
        }
    ],
    "components": {
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "o_t_h"
            }
        }
    },
    "security": [
        {
            "ApiKeyAuth": []
        }
    ],
    "paths": {
        "/v1/collections/": {
            "post": {
                "description": "Create a new collection under user's account.",
                "tags": [
                    "Collections"
                ],
                "summary": "Add collection",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the new collection to be created.",
                                        "example": "Woman in Quran"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Collections"
                ],
                "description": "List collections owned by the user. This api contains pagination. Read more about [pagination](/#pagination)",
                "summary": "Get all collections",
                "parameters": [
                    {
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "recentlyUpdated",
                                "alphabetical"
                            ],
                            "description": "Sort the collections list either by the time they were updated at descendingly or alphabetically.",
                            "example": "recentlyUpdated"
                        },
                        "description": "Sort the collections list either by the time they were updated at descendingly or alphabetically."
                    },
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/collections/{collectionId}/bookmarks": {
            "post": {
                "description": "Add a bookmark to an existing collection.",
                "tags": [
                    "Collections"
                ],
                "summary": "Add collection Bookmark",
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string",
                            "description": "The Id of the collection to be added.",
                            "example": "cld5iqnhv0003yi3hbxmlco02"
                        },
                        "required": true,
                        "description": "The Id of the collection to be added."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "integer",
                                                "description": "The Surah number.",
                                                "example": 2
                                            },
                                            "mushaf": {
                                                "type": "integer",
                                                "enum": [
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    11
                                                ],
                                                "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed",
                                                "example": 4
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "ayah"
                                                ],
                                                "description": "The bookmark type.",
                                                "default": "ayah"
                                            },
                                            "verseNumber": {
                                                "type": "integer",
                                                "example": 3
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "mushaf",
                                            "verseNumber"
                                        ],
                                        "additionalProperties": false,
                                        "title": "Ayah"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "integer",
                                                "description": "Surah, Juz or page number."
                                            },
                                            "mushaf": {
                                                "type": "integer",
                                                "enum": [
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    11
                                                ],
                                                "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "juz",
                                                    "page",
                                                    "surah"
                                                ],
                                                "description": "The bookmark type.",
                                                "example": "surah"
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "mushaf"
                                        ],
                                        "additionalProperties": false,
                                        "title": "Surah, Juz, Or Page"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a bookmark from an existing collection by bookmark's details. When successfully deleted, the bookmark itself does not get deleted but rather only detached from the collection.",
                "tags": [
                    "Collections"
                ],
                "summary": "Delete collection bookmark by details",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "integer",
                                                "description": "Surah number",
                                                "example": 2
                                            },
                                            "mushaf": {
                                                "type": "integer",
                                                "enum": [
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    11
                                                ],
                                                "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed",
                                                "example": 4
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "ayah"
                                                ],
                                                "description": "The bookmark type.",
                                                "default": "ayah"
                                            },
                                            "verseNumber": {
                                                "type": "integer",
                                                "example": 3
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "mushaf",
                                            "verseNumber"
                                        ],
                                        "additionalProperties": false,
                                        "title": "Ayah"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "integer",
                                                "description": "Surah, Juz or page number."
                                            },
                                            "mushaf": {
                                                "type": "integer",
                                                "enum": [
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    11
                                                ],
                                                "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "juz",
                                                    "page",
                                                    "surah"
                                                ],
                                                "description": "The bookmark type.",
                                                "example": "surah"
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "mushaf"
                                        ],
                                        "additionalProperties": false,
                                        "title": "Surah, Juz, Or Page"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/v1/collections/{collectionId}": {
            "delete": {
                "description": "Delete a an existing collection.",
                "tags": [
                    "Collections"
                ],
                "summary": "Delete collection",
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string",
                            "description": "The Id of the collection to be deleted.",
                            "example": "cld5iqni20004yi3hftv5d7vg"
                        },
                        "required": true,
                        "description": "The Id of the collection to be deleted."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Get all resources that belong to an existing collection by collection id.",
                "tags": [
                    "Collections"
                ],
                "summary": "Get collection items by id",
                "parameters": [
                    {
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "recentlyAdded",
                                "verseKey"
                            ],
                            "description": "Sort the collection items either by the time they were added at descendingly or by Ayah key."
                        },
                        "description": "Sort the collection items either by the time they were added at descendingly or by Ayah key."
                    },
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Update an existing collection.",
                "tags": [
                    "Collections"
                ],
                "summary": "Update collection",
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string",
                            "description": "The Id of the collection to be updated."
                        },
                        "required": true,
                        "description": "The Id of the collection to be updated."
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The new name of the collection to be updated."
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/collections/{collectionId}/bookmarks/{bookmarkId}": {
            "delete": {
                "description": "Delete a bookmark from an existing collection by bookmark's id. When successfully deleted, the bookmark itself does not get deleted but rather only detached from the collection.",
                "tags": [
                    "Collections"
                ],
                "summary": "Delete collection bookmark by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "collectionId",
                        "schema": {
                            "type": "string",
                            "description": "The Id of the collection to be deleted.",
                            "example": "cld5iqnio0005yi3hgm496ypq"
                        },
                        "required": true,
                        "description": "The Id of the collection to be deleted."
                    },
                    {
                        "in": "path",
                        "name": "bookmarkId",
                        "schema": {
                            "type": "string",
                            "description": "The Id of the bookmark to be deleted.",
                            "example": "cld5iqnio0006yi3hfyu13d4z"
                        },
                        "required": true,
                        "description": "The Id of the bookmark to be deleted."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/collections/all": {
            "get": {
                "description": "Get all existing collections along with resources that belong to them.",
                "tags": [
                    "Collections"
                ],
                "summary": "Get all collection items",
                "parameters": [
                    {
                        "in": "query",
                        "name": "sortBy",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "recentlyUpdated",
                                "alphabetical"
                            ],
                            "description": "Sort the collection items either by the time they were updated at descendingly or alphabetically."
                        },
                        "description": "Sort the collection items either by the time they were updated at descendingly or alphabetically."
                    },
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bookmarks/": {
            "post": {
                "description": "Add a bookmark by details.",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Add user bookmark",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "integer",
                                                "description": "The Surah number.",
                                                "example": 2
                                            },
                                            "mushaf": {
                                                "type": "integer",
                                                "enum": [
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    11
                                                ],
                                                "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed",
                                                "example": 4
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "ayah"
                                                ],
                                                "description": "The bookmark type.",
                                                "default": "ayah"
                                            },
                                            "verseNumber": {
                                                "type": "integer",
                                                "description": "The Ayah number to be added.",
                                                "example": 3
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "mushaf",
                                            "verseNumber"
                                        ],
                                        "additionalProperties": false,
                                        "title": "Ayah"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "integer",
                                                "description": "Surah, Juz or page number."
                                            },
                                            "mushaf": {
                                                "type": "integer",
                                                "enum": [
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    11
                                                ],
                                                "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                                            },
                                            "type": {
                                                "type": "string",
                                                "enum": [
                                                    "juz",
                                                    "page",
                                                    "surah"
                                                ],
                                                "description": "The bookmark type.",
                                                "example": "surah"
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "mushaf"
                                        ],
                                        "additionalProperties": false,
                                        "title": "Surah, Juz, Or page"
                                    }
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Get all bookmarks. This includes bookmarks belonging to a collection.",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Get user bookmarks",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mushafId",
                        "schema": {
                            "type": "integer",
                            "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                        },
                        "required": true,
                        "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "page",
                                "juz",
                                "surah",
                                "ayah"
                            ],
                            "default": "ayah"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "required": false,
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "required": false,
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "required": false,
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "required": false,
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bookmarks/{bookmarkId}": {
            "delete": {
                "description": "Delete a bookmark by id.",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Delete Bookmark",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bookmarkId",
                        "schema": {
                            "type": "string",
                            "description": "The id of the bookmark to be deleted.",
                            "example": "cld5iqnez0000yi3hb7l0ewqn"
                        },
                        "required": true,
                        "description": "The id of the bookmark to be deleted."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bookmarks/ayahs-range": {
            "get": {
                "description": "Get all bookmarks within a specific Ayahs range.",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Get bookmarks within a range of Ayahs",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mushafId",
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                11
                            ],
                            "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                        },
                        "required": true,
                        "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                    },
                    {
                        "in": "query",
                        "name": "chapterNumber",
                        "schema": {
                            "type": "integer",
                            "description": "The number of the Surah that the Ayahs range belong to."
                        },
                        "required": true,
                        "description": "The number of the Surah that the Ayahs range belong to."
                    },
                    {
                        "in": "query",
                        "name": "verseNumber",
                        "schema": {
                            "type": "integer",
                            "description": "The Ayah number at which the range starts."
                        },
                        "required": true,
                        "description": "The Ayah number at which the range starts."
                    },
                    {
                        "in": "query",
                        "name": "perPage",
                        "schema": {
                            "type": "integer",
                            "description": "The number of Ayahs."
                        },
                        "required": true,
                        "description": "The number of Ayahs."
                    },
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "required": false,
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "required": false,
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "required": false,
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "required": false,
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bookmarks/bookmark": {
            "get": {
                "description": "Get a bookmark by details",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Get bookmark",
                "parameters": [
                    {
                        "in": "query",
                        "name": "key",
                        "schema": {
                            "type": "integer",
                            "description": "Surah, Juz or page number.",
                            "example": 2
                        },
                        "required": true,
                        "description": "Surah, Juz or page number."
                    },
                    {
                        "in": "query",
                        "name": "mushaf",
                        "schema": {
                            "type": "integer",
                            "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                11
                            ],
                            "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed",
                            "example": 4
                        },
                        "required": true,
                        "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "page",
                                "juz",
                                "surah",
                                "ayah"
                            ],
                            "description": "The bookmark type.",
                            "default": "ayah"
                        },
                        "required": false,
                        "description": "The bookmark type."
                    },
                    {
                        "in": "query",
                        "name": "verseNumber",
                        "schema": {
                            "type": "integer",
                            "description": "The Ayah number of the bookmark"
                        },
                        "required": false,
                        "description": "The Ayah number of the bookmark"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/bookmarks/collections": {
            "get": {
                "description": "Get all collections that a bookmark belongs to by bookmark details.",
                "tags": [
                    "Bookmarks"
                ],
                "summary": "Get bookmark collections",
                "parameters": [
                    {
                        "in": "query",
                        "name": "mushafId",
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "enum": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                11
                            ],
                            "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                        },
                        "required": true,
                        "description": "The id of the Mushaf being used. \n\n1 = QCFV2 \n\n  2 = QCFV1 \n\n  3 = Indopak \n\n  4 = UthmaniHafs \n\n  5 = KFGQPCHAFS \n\n  6 = Indopak15Lines \n\n  7 = Indopak16Lines \n\n  11 = Tajweeed"
                    },
                    {
                        "in": "query",
                        "name": "key",
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "description": "Surah, Juz or page number."
                        },
                        "required": true,
                        "description": "Surah, Juz or page number."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "page",
                                "juz",
                                "surah",
                                "ayah"
                            ],
                            "default": "ayah"
                        },
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "required": false,
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "required": false,
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "required": false,
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "required": false,
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/preferences/": {
            "post": {
                "description": "Add or update one user preferences group like favorite Tafsirs or translations.",
                "tags": [
                    "Preferences"
                ],
                "summary": "Add or update preference",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "group": {
                                        "type": "string",
                                        "enum": [
                                            "tafsirs",
                                            "translations",
                                            "audio",
                                            "theme",
                                            "quranReaderStyles",
                                            "reading",
                                            "language"
                                        ],
                                        "description": "The preference group to be added or updated.",
                                        "example": "tafsirs"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "The preference key to be added or updated.",
                                        "example": "selectedTafsirs"
                                    },
                                    "value": {
                                        "description": "The preference value to be added or updated.",
                                        "example": "[\"en-tafisr-ibn-kathir\"]"
                                    }
                                },
                                "required": [
                                    "group",
                                    "key",
                                    "value"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Get all user preferences like theme, favorite reciter, default language etc.",
                "tags": [
                    "Preferences"
                ],
                "summary": "Get user preferences",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/preferences/bulk": {
            "post": {
                "description": "Add or update one or more user preferences groups like favorite Tafsirs and translations.",
                "tags": [
                    "Preferences"
                ],
                "summary": "Bulk add or update preferences",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tafsirs": {},
                                    "translations": {},
                                    "audio": {},
                                    "theme": {},
                                    "quranReaderStyles": {},
                                    "reading": {},
                                    "language": {}
                                },
                                "additionalProperties": false,
                                "example": {
                                    "theme": {
                                        "type": "auto"
                                    },
                                    "reading": {
                                        "readingPreference": "translation",
                                        "showWordByWordTranslation": false,
                                        "showWordByWordTransliteration": false,
                                        "selectedWordByWordLocale": "en",
                                        "showTooltipFor": [
                                            "translation"
                                        ],
                                        "wordClickFunctionality": "play-audio"
                                    },
                                    "quranReaderStyles": {
                                        "tafsirFontScale": 3,
                                        "quranTextFontScale": 3,
                                        "translationFontScale": 3,
                                        "quranFont": "code_v1",
                                        "mushafLines": "16_lines"
                                    },
                                    "translations": {
                                        "selectedTranslations": [
                                            131
                                        ]
                                    },
                                    "tafsirs": {
                                        "selectedTafsirs": [
                                            "en-tafisr-ibn-kathir"
                                        ]
                                    },
                                    "audio": {
                                        "reciter": 7,
                                        "playbackRate": 1,
                                        "showTooltipWhenPlayingAudio": false,
                                        "enableAutoScrolling": true
                                    },
                                    "language": "ar"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/reading-sessions/": {
            "post": {
                "description": "Create or update an existing reading session. Reading session is used to keep track of recently read Ayahs. A new reading session will be created if the user does not have an existing one in the past 20 minutes, otherwise, the existing reading session will be updated with the latest read Ayah.",
                "tags": [
                    "Reading Sessions"
                ],
                "summary": "Add or update user reading session",
                "parameters": [],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "chapterNumber": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "description": "The Surah number to be added to reading session."
                                    },
                                    "verseNumber": {
                                        "type": "integer",
                                        "minimum": 1,
                                        "description": "The Ayah number to be added to reading session."
                                    }
                                },
                                "required": [
                                    "chapterNumber",
                                    "verseNumber"
                                ],
                                "additionalProperties": false
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Get all existing reading sessions.",
                "tags": [
                    "Reading Sessions"
                ],
                "summary": "Get user reading sessions",
                "parameters": [
                    {
                        "in": "query",
                        "name": "last",
                        "schema": {
                            "type": "integer",
                            "description": "The number of items to be fetched. Should be used together with `before`",
                            "example": 10
                        },
                        "description": "The number of items to be fetched. Should be used together with `before`"
                    },
                    {
                        "in": "query",
                        "name": "first",
                        "schema": {
                            "type": "integer",
                            "oneOf": [
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "The number of items to be fetched.",
                            "example": 10
                        },
                        "description": "The number of items to be fetched."
                    },
                    {
                        "in": "query",
                        "name": "after",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor after which you want to get the next page of items. Should be used together with `first`",
                            "example": "cld5iqnfr0001yi3hdj0a2n3x"
                        },
                        "description": "The cursor after which you want to get the next page of items. Should be used together with `first`"
                    },
                    {
                        "in": "query",
                        "name": "before",
                        "schema": {
                            "type": "string",
                            "oneOf": [
                                {
                                    "type": "string"
                                }
                            ],
                            "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`",
                            "example": "cld5iqnfr0002yi3h9wd40ew8"
                        },
                        "description": "The cursor before which the previous page of items will be fetched. Should be used together with `last`"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/profile": {
            "get": {
                "description": "Get user profile.",
                "tags": [
                    "Users"
                ],
                "summary": "Get User Profile",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Request has been handled successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden error. Can either be due to access token not being passed, having been expired or the caller trying to access a resource without enough permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ForbiddenError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Token expired"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found. The resource being accessed does not exist.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "NotFoundError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "The resource you're looking for does not exist"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error. The request include one or more invalid params. Please check the request params and try again.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ValidationError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "`id` is required"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server Error. Something went wrong, try again later.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "error": {
                                            "type": "object",
                                            "properties": {
                                                "code": {
                                                    "type": "string",
                                                    "example": "ServerError"
                                                },
                                                "message": {
                                                    "type": "string",
                                                    "example": "Something went wrong"
                                                }
                                            }
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}